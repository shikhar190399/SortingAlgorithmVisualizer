{"ast":null,"code":"const now = require('performance-now');\nconst isBoolean = require('lodash.isboolean');\nconst isEmpty = require('lodash.isempty');\nconst uuid = require('uuid/v4');\nconst format = require('string-template');\nconst STATES = {\n  INIT: 'init',\n  RUNNING: 'running',\n  STOPPED: 'stopped',\n  SPLIT: 'split'\n};\nfunction Stopwatch(name, autostart, delta) {\n  const self = this;\n  if (isBoolean(name)) {\n    autostart = name;\n    name = null;\n  }\n  if (isEmpty(name)) {\n    name = uuid();\n  }\n  self._name = name;\n  self.reset();\n  self.setStartTimeDelta(delta);\n  if (autostart) {\n    this.start();\n  }\n}\nStopwatch.prototype.STATES = STATES;\nStopwatch.prototype.name = function () {\n  const self = this;\n  return self._name;\n};\nStopwatch.prototype._calculateDelta = function (start, end) {\n  return end - start;\n};\nStopwatch.prototype.start = function () {\n  const self = this;\n  if (self.state() !== STATES.STOPPED && self.state() !== STATES.INIT) {\n    throw new Error('Cannot start a stopwatch that is currently running (' + self.state() + ')');\n  }\n  self._state = STATES.RUNNING;\n  self.startTime = now();\n};\nStopwatch.prototype.stop = function () {\n  const self = this;\n  self.stopTime = now();\n  self._state = STATES.STOPPED;\n  return this.read();\n};\nStopwatch.prototype.setStartTimeDelta = function (startTimeDelta) {\n  const self = this;\n  if (self.state() !== STATES.STOPPED && self.state() !== STATES.INIT) {\n    throw new Error('Cannot set an initial start time delta on a stopwatch that is currently running (' + self.state() + ')');\n  }\n  self._StartTimeDelta = startTimeDelta;\n};\nStopwatch.prototype.split = function () {\n  const self = this;\n  if (self.state() !== STATES.RUNNING) {\n    throw new Error('Cannot split time on a stopwatch that is not currently running');\n  }\n  self.stopTime = now();\n  self._state = STATES.SPLIT;\n  return this.read();\n};\nStopwatch.prototype.unsplit = function () {\n  const self = this;\n  if (self.state() !== STATES.SPLIT) {\n    throw new Error('Cannot unsplit time on a stopwatch that is not currently split');\n  }\n  self.stopTime = null;\n  self._state = STATES.RUNNING;\n  return this.read();\n};\nStopwatch.prototype.state = function () {\n  return this._state;\n};\nStopwatch.prototype.reset = function () {\n  const self = this;\n  self._state = STATES.INIT;\n  self.startTime = null;\n  self.stopTime = null;\n};\nStopwatch.prototype.splitTime = function () {\n  const self = this;\n  if (self.state() !== STATES.SPLIT) {\n    throw new Error('Cannot get split time on a stopwatch that is not currently split');\n  }\n  return self._calculateDelta(self.startTime, self.stopTime);\n};\nStopwatch.prototype.read = Stopwatch.prototype.time = function (precision) {\n  const self = this;\n  const startTime = self.startTime;\n  let delta;\n  if (startTime) {\n    let nowTime;\n    if (self.stopTime) {\n      nowTime = self.stopTime;\n    } else {\n      nowTime = now();\n    }\n    delta = self._calculateDelta(startTime, nowTime);\n    if (self._StartTimeDelta) {\n      delta = delta + self._StartTimeDelta;\n    }\n    if (precision || precision == 0) {\n      delta = delta.toFixed(precision);\n    }\n  } else {\n    delta = NaN;\n  }\n  return delta;\n};\nStopwatch.prototype.toString = function () {\n  const self = this;\n  const template = '[{name} => state:{state}; value:{value}]';\n  return format(template, {\n    name: self.name(),\n    state: self.state(),\n    value: self.read().toFixed(2)\n  });\n};\nStopwatch.prototype.prettyPrint = function () {\n  process.stdout.write(this.toString() + '\\n');\n};\nmodule.exports = Stopwatch;","map":{"version":3,"names":["now","require","isBoolean","isEmpty","uuid","format","STATES","INIT","RUNNING","STOPPED","SPLIT","Stopwatch","name","autostart","delta","self","_name","reset","setStartTimeDelta","start","prototype","_calculateDelta","end","state","Error","_state","startTime","stop","stopTime","read","startTimeDelta","_StartTimeDelta","split","unsplit","splitTime","time","precision","nowTime","toFixed","NaN","toString","template","value","prettyPrint","process","stdout","write","module","exports"],"sources":["/Users/shikhar/MyWork/myReactWork/SortingVisualizer/node_modules/statman-stopwatch/lib/Stopwatch.js"],"sourcesContent":["const now = require('performance-now');\nconst isBoolean = require('lodash.isboolean');\nconst isEmpty = require('lodash.isempty');\nconst uuid = require('uuid/v4');\nconst format = require('string-template');\n\nconst STATES = {\n    INIT: 'init',\n    RUNNING: 'running',\n    STOPPED: 'stopped',\n    SPLIT: 'split'\n};\n\n\nfunction Stopwatch(name, autostart, delta) {\n    const self = this;\n\n    if (isBoolean(name)) {\n        autostart = name;\n        name = null;\n    }\n\n    if (isEmpty(name)) {\n        name = uuid();\n    }\n\n    self._name = name;\n\n    self.reset();\n    self.setStartTimeDelta(delta);\n\n    if (autostart) {\n        this.start();\n    }\n}\n\nStopwatch.prototype.STATES = STATES;\n\nStopwatch.prototype.name = function () {\n    const self = this;\n    return self._name;\n};\n\nStopwatch.prototype._calculateDelta = function (start, end) {\n    return end - start;\n};\n\nStopwatch.prototype.start = function () {\n    const self = this;\n\n    if (self.state() !== STATES.STOPPED && self.state() !== STATES.INIT) {\n        throw new Error('Cannot start a stopwatch that is currently running (' + self.state() + ')');\n    }\n\n    self._state = STATES.RUNNING;\n    self.startTime = now();\n};\n\nStopwatch.prototype.stop = function () {\n    const self = this;\n    self.stopTime = now();\n    self._state = STATES.STOPPED;\n    return this.read();\n};\n\nStopwatch.prototype.setStartTimeDelta = function (startTimeDelta) {\n    const self = this;\n\n    if (self.state() !== STATES.STOPPED && self.state() !== STATES.INIT) {\n        throw new Error('Cannot set an initial start time delta on a stopwatch that is currently running (' + self.state() + ')');\n    }\n\n    self._StartTimeDelta = startTimeDelta;\n};\n\nStopwatch.prototype.split = function () {\n    const self = this;\n\n    if (self.state() !== STATES.RUNNING) {\n        throw new Error('Cannot split time on a stopwatch that is not currently running');\n    }\n\n    self.stopTime = now();\n    self._state = STATES.SPLIT;\n    return this.read();\n};\n\nStopwatch.prototype.unsplit = function () {\n    const self = this;\n\n    if (self.state() !== STATES.SPLIT) {\n        throw new Error('Cannot unsplit time on a stopwatch that is not currently split');\n    }\n\n    self.stopTime = null;\n    self._state = STATES.RUNNING;\n    return this.read();\n};\n\nStopwatch.prototype.state = function () {\n    return this._state;\n};\n\nStopwatch.prototype.reset = function () {\n    const self = this;\n    self._state = STATES.INIT;\n    self.startTime = null;\n    self.stopTime = null;\n};\n\nStopwatch.prototype.splitTime = function () {\n    const self = this;\n\n    if (self.state() !== STATES.SPLIT) {\n        throw new Error('Cannot get split time on a stopwatch that is not currently split');\n    }\n\n    return self._calculateDelta(self.startTime, self.stopTime);\n\n};\n\nStopwatch.prototype.read = Stopwatch.prototype.time = function (precision) {\n    const self = this;\n    const startTime = self.startTime;\n    let delta;\n\n    if (startTime) {\n        let nowTime;\n        if (self.stopTime) {\n            nowTime = self.stopTime;\n        } else {\n            nowTime = now();\n        }\n\n        delta = self._calculateDelta(startTime, nowTime);\n\n        if (self._StartTimeDelta) {\n            delta = delta + self._StartTimeDelta;            \n        }\n\n        if (precision || precision==0) {\n            delta = delta.toFixed(precision);\n        }\n    } else {\n        delta = NaN;\n    }\n\n    return delta;\n};\n\nStopwatch.prototype.toString = function () {\n    const self = this;\n    const template = '[{name} => state:{state}; value:{value}]';\n    return format(template, {name: self.name(), state: self.state(), value: self.read().toFixed(2)});\n};\n\nStopwatch.prototype.prettyPrint = function () {\n    process.stdout.write(this.toString() + '\\n');\n};\n\nmodule.exports = Stopwatch;"],"mappings":"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"},"metadata":{},"sourceType":"script"}